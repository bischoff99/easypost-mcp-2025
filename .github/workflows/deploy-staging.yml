name: Deploy to Staging

on:
  push:
    branches:
      - staging
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Force deploy to staging'
        required: false
        default: 'true'

env:
  NODE_VERSION: '22.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint --if-present
        continue-on-error: true
      
      - name: Run tests
        run: npm test --if-present
        continue-on-error: true
      
      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Build application
        run: npm run build --if-present
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Job 2: Build and Push Docker Image
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=staging-latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=4.0.0
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Job 3: Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment directory
        run: |
          mkdir -p deployment
          cp docker-compose.staging.yml deployment/
          cp .env.staging deployment/.env 2>/dev/null || echo "No .env.staging file found"
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy with Docker Compose
        run: |
          cd deployment
          docker-compose -f docker-compose.staging.yml pull || true
          docker-compose -f docker-compose.staging.yml up -d --force-recreate
          sleep 30
      
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 120 bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do echo "Waiting for MCP Server..."; sleep 5; done' || echo "MCP Server health check timeout"
          timeout 120 bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do echo "Waiting for Web Dashboard..."; sleep 5; done' || echo "Web Dashboard health check timeout"
      
      - name: Run health checks
        run: |
          echo "=== Running health checks ==="
          
          # Check MCP Server
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "‚úÖ MCP Server is healthy"
          else
            echo "‚ùå MCP Server health check failed"
            exit 1
          fi
          
          # Check Web Dashboard
          if curl -f http://localhost:8080/health 2>/dev/null; then
            echo "‚úÖ Web Dashboard is healthy"
          else
            echo "‚ùå Web Dashboard health check failed"
            exit 1
          fi
          
          # Check Redis
          docker-compose -f deployment/docker-compose.staging.yml exec -T redis redis-cli ping || echo "‚ö†Ô∏è  Redis check skipped"
          
          echo "=== Health checks complete ==="
      
      - name: Display deployment status
        if: always()
        run: |
          echo "=== Deployment Status ==="
          cd deployment
          docker-compose -f docker-compose.staging.yml ps
          echo ""
          echo "=== Container Logs (last 50 lines) ==="
          docker-compose -f docker-compose.staging.yml logs --tail=50
      
      - name: Send deployment notification
        if: always() && secrets.DEPLOYMENT_WEBHOOK_URL != ''
        env:
          WEBHOOK_URL: ${{ secrets.DEPLOYMENT_WEBHOOK_URL }}
        run: |
          if [ -n "$WEBHOOK_URL" ]; then
            STATUS="${{ job.status }}"
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            COMMIT_SHA="${{ github.sha }}"
            AUTHOR="${{ github.actor }}"
            
            curl -X POST "$WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{\"text\":\"üöÄ Staging Deployment $STATUS\",\"details\":\"Commit: ${COMMIT_SHA:0:7} by $AUTHOR - $COMMIT_MSG\",\"status\":\"$STATUS\"}" \
              || echo "Webhook notification failed"
          else
            echo "No webhook URL configured, skipping notification"
          fi
        continue-on-error: true
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚è™ Deployment failed, attempting rollback..."
          cd deployment
          docker-compose -f docker-compose.staging.yml down --volumes
          echo "Previous deployment stopped"
        continue-on-error: true
